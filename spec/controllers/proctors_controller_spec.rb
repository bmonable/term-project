require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ProctorsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Proctor. As you add validations to Proctor, be sure to
  # adjust the attributes here as well.


  let(:valid_attributes) { { "name" => "1" , "position" => "1", "tel" => "1", "email" => "1" } }

  let(:invalid_attributes) {}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ProctorsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  def mock_proctor(stubs={})
      @mock_proctor ||= mock_model(Proctor, stubs).as_null_object
  end
  
  describe "#create" do
    before(:each) do
        @attr = { :name => "1", :position => "1", :tel => "1", :email => "1" }
    end
    it "should create a new proctor" do
        lambda do
          post :create, :proctor => @attr
          flash[:notice].should_not be_nil
        end.should change(Proctor, :count).by(1)
    end
    it "should redirect to the proctor show page and show success message" do
      post :create, :proctor => @attr
      flash[:notice].should =~ /Proctor was successfully created./i
      response.should redirect_to proctor_path(assigns(:proctor))
    end
  end


    
 describe "GET #index" do
    it "assigns all proctors as @proctors" do
      proctor = Proctor.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:proctors)).to eq([proctor])
    end
  end

  
#  describe "GET #index" do
#    it "assigns all proctors as @proctors" do
#      proctor = Proctor.create! valid_attributes
#      get :index, {}, valid_session
#      expect(assigns(:proctors)).to eq([proctor])
#    end
#  end
  
  describe "GET #show" do
    it "assigns the requested proctor as @proctor" do
      proctor = Proctor.create! valid_attributes
      get :show, {:id => proctor.to_param}, valid_session
      expect(assigns(:proctor)).to eq(proctor)
    end
  end
  

#  describe "GET #show" do
#    it "assigns the requested proctor as @proctor" do
#      proctor = Proctor.create! valid_attributes
#      get :show, {:id => proctor.to_param}, valid_session
#      expect(assigns(:proctor)).to eq(proctor)
#    end
#  end

  describe "GET #new" do
    it "assigns a new proctor as @proctor" do
      get :new, {}, valid_session
      expect(assigns(:proctor)).to be_a_new(Proctor)
    end
  end
  
  describe "GET #edit" do
    it "assigns the requested proctor as @proctor" do
      proctor = Proctor.create! valid_attributes
      get :edit, {:id => proctor.to_param}, valid_session
      expect(assigns(:proctor)).to eq(proctor)
    end
  end
  
  
  describe "DELETE #destroy" do
    it "destroys the requested proctor" do
      proctor = Proctor.create! valid_attributes
      expect {
        delete :destroy, {:id => proctor.to_param}, valid_session
      }.to change(Proctor, :count).by(-1)
    end

    it "redirects to the proctors list" do
      proctor = Proctor.create! valid_attributes
      delete :destroy, {:id => proctor.to_param}, valid_session
      expect(response).to redirect_to(proctors_url)
    end
  end
  
  describe "PUT #update" do
     
    context "with valid params" do
      let(:new_attributes) {
         { "name" => "2" , "position" => "2", "tel" => "2", "email" => "2" }
      }

      it "updates the requested proctor" do
        proctor = Proctor.create! valid_attributes
        put :update, {:id => proctor.to_param, :proctor => new_attributes}, valid_session
        proctor.reload
        flash[:notice].should =~ /Proctor was successfully updated./i
        
      end

      it "assigns the requested proctor as @proctor" do
        proctor = Proctor.create! valid_attributes
        put :update, {:id => proctor.to_param, :proctor => valid_attributes}, valid_session
        expect(assigns(:proctor)).to eq(proctor)
      end

      it "redirects to the proctor" do
        proctor = Proctor.create! valid_attributes
        put :update, {:id => proctor.to_param, :proctor => valid_attributes}, valid_session
        expect(response).to redirect_to(proctor)
      end
    end


  end
  


 



end
