require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RoomsController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Room. As you add validations to Room, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {  { "number" => "1" , "build" => "1", "date" => "1", "time" => "1" , "proctor1" => "1" , "proctor2" => "1" }}

  let(:invalid_attributes) {}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # RoomsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all rooms as @rooms" do
      room = Room.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:rooms)).to eq([room])
    end
  end
  
  describe "GET #show" do
    it "assigns the requested room as @room" do
      room = Room.create! valid_attributes
      get :show, {:id => room.to_param}, valid_session
      expect(assigns(:room)).to eq(room)
    end
  end
  
  describe "GET #edit" do
    it "assigns the requested room as @room" do
      room = Room.create! valid_attributes
      get :edit, {:id => room.to_param}, valid_session
      expect(assigns(:room)).to eq(room)
    end
  end
  
  describe "PUT #update" do
     
    context "with valid params" do
      let(:new_attributes) {
         { "number" => "2" , "build" => "2", "date" => "2", "time" => "2" , "proctor1" => "2" , "proctor2" => "2" }
      }

      it "updates the requested room" do
        room = Room.create! valid_attributes
        put :update, {:id => room.to_param, :room => new_attributes}, valid_session
        room.reload
        flash[:notice].should =~ /Room was successfully updated./i
        
      end

      it "assigns the requested room as @room" do
        room = Room.create! valid_attributes
        put :update, {:id => room.to_param, :room => valid_attributes}, valid_session
        expect(assigns(:room)).to eq(room)
      end

      it "redirects to the proctor" do
        room = Room.create! valid_attributes
        put :update, {:id => room.to_param, :room => valid_attributes}, valid_session
        expect(response).to redirect_to(room)
      end
    end

  end
end
